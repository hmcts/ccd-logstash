input {
    jdbc {
        # CCD conf
        jdbc_connection_string => "${DB_URL}"
        jdbc_user => "${DB_USER}"
        jdbc_password => "${DB_PWD}"
        jdbc_validate_connection => true
        jdbc_driver_library => "/usr/share/logstash/postgresql-42.2.2.jar"
        jdbc_driver_class => "org.postgresql.Driver"

        jdbc_page_size => "20000"
        jdbc_default_timezone => "UTC"

        use_column_value => false

        parameters => {
                        "divorcej" => "DIVORCE"
                        "cmcj" => "CMC"
                        "probatej" => "PROBATE"
                        "ethosj" => "EMPLOYMENT"
                        "sscsj" => "SSCS"
                      }

        statement => "UPDATE case_data SET marked_by_logstash = true WHERE marked_by_logstash = false AND jurisdiction != :divorcej AND jurisdiction != :cmcj AND jurisdiction != :probatej AND jurisdiction != :sscsj AND jurisdiction != :ethosj RETURNING id, created_date, last_modified, jurisdiction, case_type_id, state, last_state_modified_date, data::TEXT as json_data, data_classification::TEXT as json_data_classification, reference, security_classification, supplementary_data::TEXT as json_supplementary_data"

    	clean_run => false
    	last_run_metadata_path => "/usr/share/logstash/data/.logstash_jdbc_last_run_ccd"
	    
	    # every second
        schedule => "* * * * * *"
	    # every 2 seconds
        # schedule => "/2 * * * * *"
    }
}

filter{
    json{
    	source => "json_data"
    	target => "data"
    	remove_field => ["json_data"]
    }

    json{
         source => "json_supplementary_data"
         target => "supplementary_data"
         remove_field => ["json_supplementary_data"]
    }

    json{
         source => "json_data_classification"
         target => "data_classification"
         remove_field => ["json_data_classification"]
    }

    if [data][SearchCriteria] {
        clone {
            clones => ["SearchCriteria"]
        }
    }

    if [type] == "SearchCriteria" {
        if [data][SearchCriteria][SearchParties] {
           mutate {
              rename => {"[data][SearchCriteria][SearchParties]" => "SearchParties" }
           }
        }
        if [data][SearchCriteria][OtherCaseReferences] {
           mutate {
              rename => {"[data][SearchCriteria][OtherCaseReferences]" => "OtherCaseReferences" }
           }
        }
        if [supplementary_data][HMCTSServiceId] {
           mutate {
              rename => {"[supplementary_data][HMCTSServiceId]" => "HMCTSServiceId" }
           }
        }

        if [data][caseNameHmctsInternal] {
           mutate {
              rename => {"[data][caseNameHmctsInternal]" => "caseNameHmctsInternal" }
           }
        }

        if [data][caseManagementLocation][RegionId] {
            mutate {
               rename => {"[data][caseManagementLocation][RegionId]" => "region" }
            }
        }

        if [data][caseManagementLocation][BaseLocationId] {
            mutate {
              rename => {"[data][caseManagementLocation][BaseLocationId]" => "baseLocation" }
            }
        }
        mutate {
            rename => { "[reference]" => "caseReference"}
            rename => { "[jurisdiction]"  => "jurisdictionId"}
            rename => { "[state]"  => "stateId"}
            rename => { "[case_type_id]"  => "caseTypeId"}
        }
        mutate {
           add_field => { "index_id" => "global_search" }
        }
        mutate {
           lowercase => [ "index_id" ]
        }

       mutate { remove_field => [ "last_state_modified_date", "type","last_modified", "created_date", "security_classification","json_data_classification", "data_classification", "json_supplementary_data", "data" ]}
    } else {
          mutate {
        	 add_field => { "index_id" => "%{case_type_id}_cases" }
      	  }
	      mutate {
		     lowercase => [ "index_id" ]
	      }
       }
}

#TODO future releases of ES will use _doc as mapping type. When LS sets _doc as the default type, remove 'document_type'
output {
    elasticsearch {
        hosts => ["${ES_DATA_NODES_URL}"]
        sniffing => false
        index => "%{[index_id]}"
        document_type => "_doc"
        document_id => "%{id}"
        timeout => 60
    }
}
