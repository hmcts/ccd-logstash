#!groovy
@Library("Infrastructure") _

import uk.gov.hmcts.contino.azure.KeyVault
import uk.gov.hmcts.contino.Environment
import uk.gov.hmcts.contino.HealthChecker

properties([
        parameters([
                choice(name: 'PRODUCT_NAME', choices: 'ccd\nprobate\nsweeper\nccdcmc\nccddivorce\nccdprobate\nccdsscs\nccdethos', description: 'product name like probate, ccd, div.'),
                booleanParam(name: 'BUILD_LOGSTASH_IMAGE', defaultValue: false, description: 'set to true to build a new Logstash image'),
                booleanParam(name: 'DEPLOY_LOGSTASH', defaultValue: false, description: 'set to true to deploy Logstash'),
                stringParam(name: 'START_CASE_ID', defaultValue: false, description: 'the DB case ID from which the Logstash Indexer needs to start indexing from'),
                stringParam(name: 'END_CASE_ID', defaultValue: false, description: 'the DB case ID up to which the Logstash Indexer needs to index to'),
        ])
])

productName = params.PRODUCT_NAME
startCaseId = params.START_CASE_ID
endCaseId = params.END_CASE_ID
Environment environment = new Environment(env)

node {
        stage('Checkout') {
                deleteDir()
                checkout scm
        }

        env.PATH = "$env.PATH:/usr/local/bin"
        if (params.BUILD_LOGSTASH_IMAGE == true) {
                stage("Packer Install") {
                        packerInstall {
                                install_path = '.' // optional location to install packer
                                platform = 'linux_amd64' // platform where packer will be installed
                                version = '1.5.1' // version of packer to install
                        }
                }

                stage("Create Logstash resource group - ${productName}") {
                        onMaster {
                                withSubscription('nonprod') {
                                        sh 'terraform init'
                                        sh "terraform apply -auto-approve -var common_tags={} -var 'env=${environment.nonProdName}' -var 'name=${productName}' -var " +
                                                "'subscription=nonprod' -var 'product=${productName}' -target=azurerm_resource_group.logstash-resourcegroup" +
                                                (fileExists("${environment.nonProdName}.tfvars") ? " -var-file=${environment.nonProdName}.tfvars" : "")
                                }

                                withSubscription('prod') {
                                        sh 'terraform init'
                                        sh "terraform apply -auto-approve -var common_tags={} -var 'env=${environment.prodName}' -var 'name=${productName}' " +
                                                "-var " +
                                                "'subscription=prod' -var 'product=${productName}' -target=azurerm_resource_group.logstash-resourcegroup" +
                                                (fileExists("${environment.prodName}.tfvars") ? " -var-file=${environment.prodName}.tfvars" : "")
                                }
                        }

                        onDemo {
                                withSubscription('nonprod') {
                                        sh 'terraform init'
                                        sh "terraform apply -auto-approve -var common_tags={} -var 'env=${environment.demoName}' -var 'name=${productName}' -var " +
                                                "'subscription=nonprod' -var 'product=${productName}' -target=azurerm_resource_group.logstash-resourcegroup" +
                                                (fileExists("${environment.demoName}.tfvars") ? " -var-file=${environment.demoName}.tfvars" : "")
                                }
                        }

                        onPerftest {
                                withSubscription('qa') {
                                        sh 'terraform init'
                                        sh "terraform apply -auto-approve -var common_tags={} -var 'env=${environment.perftestName}' -var 'name=${productName}' -var " +
                                                "'subscription=qa' -var 'product=${productName}' -target=azurerm_resource_group.logstash-resourcegroup" +
                                                (fileExists("${environment.perftestName}.tfvars") ? " -var-file=${environment.perftestName}.tfvars" : "")
                                }
                        }

                        onIthc {
                                withSubscription('qa') {
                                        sh 'terraform init'
                                        sh "terraform apply -auto-approve -var common_tags={} -var 'env=${environment.ithcName}' -var 'name=${productName}' -var " +
                                                "'subscription=qa' -var 'product=${productName}' -target=azurerm_resource_group.logstash-resourcegroup" +
                                                (fileExists("${environment.ithcName}.tfvars") ? " -var-file=${environment.ithcName}.tfvars" : "")
                                }
                        }
                }

                stage("Packer Build Logstash Image - ${productName}")
                 {def vaultName = (productName=="sweeper") || (productName=="ccdprobate") || (productName=="ccdcmc") || (productName=="ccddivorce") || (productName=="ccdsscs") || (productName=="ccdethos") ? "ccd" : productName
                        onMaster {
                                withSubscription('nonprod') {

                                        KeyVault keyVault = new KeyVault(this, 'nonprod', "${vaultName}-${environment.nonProdName}")
                                        initialiseLogstashConfFiles(keyVault, 'nonprod', 'aat')

                                        packerBuildNonProd {
                                                bin = './packer' // optional location of packer install
                                                template = 'packer_images/logstash.packer.json'
                                                //var = ["name=value"] // optional variable setting
                                        }
                                }

                                withSubscription('prod') {

                                        KeyVault keyVault = new KeyVault(this, 'prod', "${vaultName}-${environment.prodName}")
                                        initialiseLogstashConfFiles(keyVault, 'prod', 'prod')

                                        packerBuildProd {
                                                bin = './packer' // optional location of packer install
                                                template = 'packer_images/logstash.packer.json'
                                                //var = ["name=value"] // optional variable setting
                                        }
                                }
                        }

                        onDemo {
                                withSubscription('nonprod') {

                                        KeyVault keyVault = new KeyVault(this, 'nonprod', "${vaultName}-${environment.demoName}")
                                        initialiseLogstashConfFiles(keyVault, 'nonprod', 'demo')

                                        packerBuildDemo {
                                                bin = './packer' // optional location of packer install
                                                template = 'packer_images/logstash.packer.json'
                                                //var = ["name=value"] // optional variable setting
                                        }
                                }
                        }

                        onPerftest {
                                withSubscription('qa') {

                                        KeyVault keyVault = new KeyVault(this, 'qa', "${vaultName}-${environment.perftestName}")
                                        initialiseLogstashConfFiles(keyVault, 'qa', 'perftest')

                                        packerBuildPerftest {
                                                bin = './packer' // optional location of packer install
                                                template = 'packer_images/logstash.packer.json'
                                                //var = ["name=value"] // optional variable setting
                                        }
                                }
                        }
                        onIthc {
                                withSubscription('qa') {

                                        KeyVault keyVault = new KeyVault(this, 'qa', "${vaultName}-${environment.ithcName}")
                                        initialiseLogstashConfFiles(keyVault, 'qa', 'ithc')

                                        packerBuildIthc {
                                                bin = './packer' // optional location of packer install
                                                template = 'packer_images/logstash.packer.json'
                                                //var = ["name=value"] // optional variable setting
                                        }
                                }
                        }
                }
        }

        if (params.DEPLOY_LOGSTASH == true) {
                onMaster {
                        withInfrastructurePipeline(productName, environment.nonProdName, 'nonprod')
                        healthCheckStage(environment.nonProdName)

                        withInfrastructurePipeline(productName, environment.prodName, 'prod')
                        healthCheckStage(environment.prodName)

                }

                onDemo {
                        withInfrastructurePipeline(productName, environment.demoName, 'nonprod')
                        healthCheckStage(environment.demoName)
                }

                onPerftest {
                        withInfrastructurePipeline(productName, environment.perftestName, 'qa')
                        healthCheckStage(environment.perftestName)
                }
                onIthc {
                        withInfrastructurePipeline(productName, environment.ithcName, 'qa')
                        healthCheckStage(environment.ithcName)
                }
        }
}

def packerInstall(body) {
        // evaluate the body block and collect configuration into the object
        def config = [:]
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()

        // input checking
        config.install_path = config.install_path == null ? '/usr/bin' : config.install_path
        if (config.platform == null || config.version == null) {
                throw new Exception('A required parameter is missing from this packer.install block. Please consult the documentation for proper usage.')
        }

        // check if current version already installed
        if (fileExists("${config.install_path}/packer")) {
                installed_version = sh(returnStdout: true, script: "${config.install_path}/packer version").trim()
                if (installed_version =~ config.version) {
                        print "Packer version ${config.version} already installed at ${config.install_path}."
                        return
                }
        }
        // otherwise download and install specified version
        download_file("https://releases.hashicorp.com/packer/${config.version}/packer_${config.version}_${config.platform}.zip", 'packer.zip')
        unzip(zipFile: 'packer.zip', dir: config.install_path)
        sh "chmod +rx ${config.install_path}/packer"
        remove_file('packer.zip')
        print "Packer successfully installed at ${config.install_path}/packer."
}

def remove_file(String file) {
        sh "rm ${file}"
}

def download_file(String url, String dest) {
        sh "wget -q -O ${dest} ${url}"
}

def packerBuildNonProd(body) {

        def config = [:]
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()

        if (config.template == null) {
                throw new Exception('The required template parameter was not set.')
        }
        config.bin = config.bin == null ? 'packer' : config.bin
        try {
                cmd = "${config.bin} build -color=false"
                if (config.var_file != null) {
                        if (fileExists(config.var_file)) {
                                cmd += " -var_file=${config.var_file}"
                        }
                        else {
                                throw new Exception("The var file ${config.var_file} does not exist!")
                        }
                }
                if (config.var == null) {
                        config.var = []
                }
                config.var.add("resource_group_name=${productName}-logstash-aat")
                config.var.add("product=${productName}")
                config.var.each() {
                        cmd += " -var \'${it}\'"
                }

                if (config.only != null) {
                        cmd += " -only=${config.only}"
                }

                sh "${cmd} ${config.template}"
        }
        catch(Exception error) {
                print 'Failure using packer build.'
                throw error
        }
        print 'Packer build artifact created successfully.'
}

def packerBuildDemo(body) {

        def config = [:]
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()

        if (config.template == null) {
                throw new Exception('The required template parameter was not set.')
        }
        config.bin = config.bin == null ? 'packer' : config.bin
        try {
                cmd = "${config.bin} build -color=false"
                if (config.var_file != null) {
                        if (fileExists(config.var_file)) {
                                cmd += " -var_file=${config.var_file}"
                        }
                        else {
                                throw new Exception("The var file ${config.var_file} does not exist!")
                        }
                }
                if (config.var == null) {
                        config.var = []
                }
                config.var.add("resource_group_name=${productName}-logstash-demo")
                config.var.add("product=${productName}")
                config.var.each() {
                        cmd += " -var \'${it}\'"
                }

                if (config.only != null) {
                        cmd += " -only=${config.only}"
                }

                sh "${cmd} ${config.template}"
        }
        catch(Exception error) {
                print 'Failure using packer build.'
                throw error
        }
        print 'Packer build artifact created successfully.'
}

def packerBuildProd(body) {

        def config = [:]
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()

        if (config.template == null) {
                throw new Exception('The required template parameter was not set.')
        }
        config.bin = config.bin == null ? 'packer' : config.bin
        try {
                cmd = "${config.bin} build -color=false"
                if (config.var_file != null) {
                        if (fileExists(config.var_file)) {
                                cmd += " -var_file=${config.var_file}"
                        }
                        else {
                                throw new Exception("The var file ${config.var_file} does not exist!")
                        }
                }
                if (config.var == null) {
                        config.var = []
                }
                config.var.add("resource_group_name=${productName}-logstash-prod")
                config.var.add("product=${productName}")
                config.var.each() {
                        cmd += " -var \'${it}\'"
                }

                if (config.only != null) {
                        cmd += " -only=${config.only}"
                }

                sh "${cmd} ${config.template}"
        }
        catch(Exception error) {
                print 'Failure using packer build.'
                throw error
        }
        print 'Packer build artifact created successfully.'

}

def packerBuildPerftest(body) {

        def config = [:]
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()

        if (config.template == null) {
                throw new Exception('The required template parameter was not set.')
        }
        config.bin = config.bin == null ? 'packer' : config.bin
        try {
                cmd = "${config.bin} build -color=false"
                if (config.var_file != null) {
                        if (fileExists(config.var_file)) {
                                cmd += " -var_file=${config.var_file}"
                        }
                        else {
                                throw new Exception("The var file ${config.var_file} does not exist!")
                        }
                }
                if (config.var == null) {
                        config.var = []
                }
                config.var.add("resource_group_name=${productName}-logstash-perftest")
                config.var.add("product=${productName}")
                config.var.each() {
                        cmd += " -var \'${it}\'"
                }

                if (config.only != null) {
                        cmd += " -only=${config.only}"
                }

                sh "${cmd} ${config.template}"
        }
        catch(Exception error) {
                print 'Failure using packer build.'
                throw error
        }
        print 'Packer build artifact created successfully.'

}

def packerBuildIthc(body) {

        def config = [:]
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()

        if (config.template == null) {
                throw new Exception('The required template parameter was not set.')
        }
        config.bin = config.bin == null ? 'packer' : config.bin
        try {
                cmd = "${config.bin} build -color=false"
                if (config.var_file != null) {
                        if (fileExists(config.var_file)) {
                                cmd += " -var_file=${config.var_file}"
                        }
                        else {
                                throw new Exception("The var file ${config.var_file} does not exist!")
                        }
                }
                if (config.var == null) {
                        config.var = []
                }
                config.var.add("resource_group_name=${productName}-logstash-ithc")
                config.var.add("product=${productName}")
                config.var.each() {
                        cmd += " -var \'${it}\'"
                }

                if (config.only != null) {
                        cmd += " -only=${config.only}"
                }

                sh "${cmd} ${config.template}"
        }
        catch(Exception error) {
                print 'Failure using packer build.'
                throw error
        }
        print 'Packer build artifact created successfully.'

}

def initialiseLogstashConfFiles(KeyVault keyVault, String sub, String env) {
        def dataBaseName
        if("${productName}" == "ccd" || "${productName}" == "sweeper" || "${productName}" == "ccddivorce" || "${productName}" == "ccdcmc" || "${productName}" == "ccdprobate" || "${productName}" == "ccdsscs" || "${productName}" == "ccdethos") 
                dataBaseName = "data-store-api"
        else if("${productName}" == "probate" )
                dataBaseName = "probatemandb"
        db_host = keyVault.find("${dataBaseName}-POSTGRES-HOST").trim()
        echo "retrieved db host: ${db_host}"
        db_port = keyVault.find("${dataBaseName}-POSTGRES-PORT").trim()
        echo "retrieved db port: ${db_port}"
        db_pass = keyVault.find("${dataBaseName}-POSTGRES-PASS").trim().replaceAll('&', '\\\\&')
        db_user = keyVault.find("${dataBaseName}-POSTGRES-USER").trim()
        echo "retrieved db user: ${db_user}"
        db_name = keyVault.find("${dataBaseName}-POSTGRES-DATABASE").trim()
        echo "retrieved db name: ${db_name}"
        db_url = "jdbc:postgresql://${db_host}:${db_port}/${db_name}?ssl=true"

        es_url = getESUrlFromCCDVault(sub, env)
        echo "retrieved ES URL: ${es_url}"

        sh "cp packer_images/${productName}_logstash.conf.in packer_images/${productName}_logstash.conf"
        sh "sed -i 's|\${DB_URL}|${db_url}|' packer_images/${productName}_logstash.conf"
        sh "sed -i 's|\${DB_USER}|${db_user}|' packer_images/${productName}_logstash.conf"
        sh "sed -i 's|\${DB_PWD}|${db_pass}|' packer_images/${productName}_logstash.conf"
        sh "sed -i 's|\"\${ES_DATA_NODES_URL}\"|${es_url}|' packer_images/${productName}_logstash.conf"

        if("${productName}" == "sweeper" ) {
                sh "sed -i 's|\${START_CASE_ID}|${startCaseId}|' packer_images/${productName}_logstash.conf"
                sh "sed -i 's|\${END_CASE_ID}|${endCaseId}|' packer_images/${productName}_logstash.conf"
        }

        sh "cat packer_images/${productName}_logstash.conf"

        sh "cp packer_images/logstash.yml.in packer_images/logstash.yml"
        sh "sed -i 's|\"\${ES_DATA_NODES_URL}\"|${es_url}|' packer_images/logstash.yml"
        sh "cat packer_images/logstash.yml"

        sh "cp packer_images/dead_letter_indexing_pipeline.conf.in packer_images/dead_letter_indexing_pipeline.conf"
        sh "sed -i 's|\"\${ES_DATA_NODES_URL}\"|${es_url}|' packer_images/dead_letter_indexing_pipeline.conf"
        sh "cat packer_images/dead_letter_indexing_pipeline.conf"
}

def getESUrlFromCCDVault(String sub, String env) {
        KeyVault keyVault
        keyVault = new KeyVault(this, sub, "ccd-${env}")
        return keyVault.find("ccd-ELASTIC-SEARCH-DATA-NODES-URL").trim()
}

def healthCheckStage(environmentName) {
        stage('HealthCheck') {
                def healthChecker = new HealthChecker(this)
                healthChecker.check(healthCheckUrl(environmentName), 10, 40)
        }

}

def healthCheckUrl(environmentName) {
        ls_url = "${productName}-logstash-${environmentName}.service.core-compute-${environmentName}.internal"
        "http://" + ls_url + ":9600"
}
